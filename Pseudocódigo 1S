Algoritmo - Exec01
Declare
    Lado, Area como Decimal
Início
    Lado = Receba("Digite o lado")
    Area = (Lado * Lado)
    Mostra(("A área é: ") & Area)
Fim_Algoritmo

Algoritmo - Exec02
Declare
    Salario, Novo_salario como Decimal
Início
    Salario = Receba("Digite o salário")
    Novo_salario = (Salario * 1.15)
    Mostra(("O novo salário é: ") & Novo_salario)
Fim_Algoritmo

Algoritmo - Exec03
Declare
    Base, Altura, Area como Decimal
Início
    Base = Receba("Digite o valor da base: ")
    Altura = Receba("Digite o valor da altura")
    Area = (Base * Altura / 2)
    Mostra(("A área é: ") & Area)
Fim_Algoritmo

Algoritmo - Exec04
Declare
    Celsius, Fahrenheit como Inteiro
Início
    Celsius = Receba("Digite o valor em C°")
    Fahrenheit = ((9 * Celsius + 160) / 5)
    Mostra(("Convertido fica: ") & Fahrenheit)
Fim_Algoritmo

Algoritmo - Exec05
Declare
    A, B, C, Delta, X1, X2 como Decimal
Início
    A = Receba("Insira o valor de A")
    B = Receba("Insira o valor de B")
    C = Receba("Insira o valor de C")
    Delta = (B ^ 2 - 4 * A * C)
    X1 = ((-B + Sqr(Delta)) / 2 * A)
    X2 = ((-B - Sqr(Delta)) / 2 * A 80)
    Mostra(("As raízes são: ") & ("X1: ") & X1 & (" e X2: ") & X2)
Fim_Algoritmo

Algoritmo - Exec06
Declare
    RecipienteX, RecipienteY, X, Y como Decimal
Início
    RecipienteX = Receba("Insira o valor de X:")
    RecipienteY = Receba("Insira o valor de Y:")
    X = RecipienteY
    Y = RecipienteX
    Mostra(("O novo valor de X é: ") & X & (" e Y é: ") & Y)
Fim_Algoritmo

Algoritmo - Exec07
Declare
    Comprimento, Altura, Largura, Volume como Decimal
Início
    Comprimento = Receba("Insira o valor do comprimento: ")
    Largura = Receba("Insira o valor da largura: ")
    Altura = Receba("Insira o valor da Altura: ")
    Volume = ((Largura * Comprimento) * Altura)
    Mostra(("O volume é: ") & Volume)
Fim_Algoritmo

Algoritmo - Exec08
Declare
    Poupanca, Rentabilidade, QntMeses como Decimal
Início
    Poupanca = Receba("Insira o valor a ser investido: ")
    QntMeses = Receba("Insira a quantidade de meses para ver a previsão: ")
    Rentabilidade = ((Poupanca * 1.013) ^ (QntMeses))
    Mostra(("O valor bruto a ser retirado é: ") & Rentabilidade)
Fim_Algoritmo

Algoritmo - Exec09
Declare
    Num1, Num2 como Inteiro
Início
    Num1 = Receba("Insira o primeiro número:")
    Num2 = Receba("Insira o segundo número:")
    Mostra(("A soma dos quadrados é: ") & ((Num1*Num1)+(Num2*Num2)))
Fim_Algoritmo

Algoritmo - Exec10
Declare
    Valor1, Valor2 como Decimal
Início
    Valor1 = Receba("Insira o primeiro número:")
    Valor2 = Receba("Insira o segundo número:")
    Mostra(("A dSeerença é: ") & Valor1 - Valor2)
Fim_Algoritmo

Algoritmo - Exec11
Declare
    Raio, Perimetro como Decimal
Início
    Raio = Receba("Insira o valor do raio:")
    Mostra(("O perímetro da circumferência é: ") & (2*3.14*Raio))
Fim_Algoritmo

Algoritmo - Exec12
Declare
    AnoNasc, AnoAtual como Decimal
Início
    AnoNasc = Receba("Insira seu ano de nascimento:")
    AnoAtual = Receba("insira o ano atual:")
    Mostra(("Sua idade atual é: ") & (AnoAtual - AnoNasc) & " anos")
    Mostra(("Sua idade daqui à dezessete anos será de: ") & (AnoAtual-AnoNasc+17) & " anos")
Fim_Algoritmo

Algoritmo - Exec13
Declare
    QntAlimento como Decimal
Início
    QntAlimento = Receba("Insira a quantidade, em kg, de alimento: ")
    Mostra(("O alimento irá durar: ") & (QntAlimento/0.05) & " dias")
Fim_Algoritmo

Algoritmo - Exec14
Declare
    Ang1, Ang2 como Inteiro
Início
    Ang1 = Receba("Insira quantos graus tem o primeiro ângulo:")
    Ang2 = Receba("Insira quantos graus tem o segundo ângulo:")
    Mostra(("O valor do terceiro ângulo, em graus, é: ") & (180-(Ang1+Ang2)))
Fim_Algoritmo

Algoritmo - Exec15
Declare
    Cateto1, Carteto2, Hipotenusa como Decimal
Início
    Cateto1 = Receba("Insira o valor de um dos catetos: ")
    Cateto2 = Receba("Insira o valor do segundo cateto: ")
    Hipotenusa = ((Cateto1*Cateto1)+(Cateto2*Cateto2))
    Mostra(("O valor da hipotenusa é: ") & "Raiz quadrada de "& Hipotenusa)
Fim_Algoritmo

Algoritmo - Exec16
Declare
    HrsTrab, Valphr, Desconto, Dependentes, SalBrut, SalLiq, ValReceber como Decimal
Início
    HrsTrab = Receba("Insira as horas trabalhadas:")
    Valphr = Receba("Insira o valor por hora:")
    SalBrut = (HrsTrab * Valphr)
    Desconto = Receba("Insira o percentual de desconto:")
    Dependentes = Receba("Insira a quantidade de dependentes:")*100
    SalLiq = (SalBrut - Desconto + Dependentes)
    Mostra(("O salário a receber é: ") & SalLiq)
Fim_Algoritmo

Algoritmo - Exec17
Declare
    TmpPercurso, VelMed, Deslocamento, Litros como Decimal
Início
    TmpPercurso = Receba("Insira o tempo total de percurso:")
    VelMed = Receba("Insira a velocidade média da viagem:")
    Deslocamento = (TmpPercurso * VelMed)
    Litros = (Deslocamento/12)
    Mostra(("A quantidade de litros de gasolina consumidos foi de: ") & Litros)
Fim_Algoritmo

Algoritmo - Exec18
Declare
    Valor1, Valor2 como Inteiro
Início
    Valor1 = Receba("Insira o primeiro valor: ")
    Valor2 = Receba("Insira o segundo valor: ")
    Se (Valor1 < Valor2) Então
    	Mostra(("O resultado é: ") & Valor2 - Valor1)
        Senão (Mostra(("O resultado é: ") & Valor1 - Valor2))
    Fim_Se
Fim_Algoritmo

Algoritmo - Exec19
Declare
    Valor1, Valor2 como Decimal
Início
    Valor1 = ("Insira o primeiro valor: ")
    Valor2 = ("Insira o segundo valor: ")
    Se (Valor1 < Valor2) Então
    	Mostra(("O maior valor é: ") & Valor2)
        Senão (Mostra(("O maior valor é: ") & Valor1))
    Fim_Se
Fim_Algoritmo

Algoritmo - Exec20
Declare
    A, B, C, Delta, X1, X2 como Decimal
Início
    A = Receba("Insira o valor de A")
    B = Receba("Insira o valor de B")
    C = Receba("Insira o valor de C")
    Delta = (B ^ 2 - 4 * A * C)
    X1 = ((-B + Sqr(Delta)) / 2 * A)
    X2 = ((-B - Sqr(Delta)) / 2 * A)
    	Se (Delta < 0) Então
    		Mostra("Essa equação não possuí raízes reais!")
    		Senão
    			Se Delta = 0 Então
    			Mostra (("Essa equação possuí raízes reais iguais, sendo elas: ") & (Quebra_de_Linha) & ("X1: ") & X1 & (Quebra_de_Linha) & ("X2: ") & X2)
    				Senão
    				Mostra(("Essa Equação possui duas raízes reais dSeerentes, sendo elas: ") & (Quebra_de_Linha) & ("X1: ") & X1 & (Quebra_de_Linha) & ("X2: ") & X2)
    			Fim_Se
    	Fim_Se
Fim_Algoritmo

Algoritmo - Exec21
Declare
    B1, B2, B3, B4, Media como Decimal
Início
    B1 = Receba("Insira sua nota referente ao primeiro bimestre:")
    B2 = Receba("Insira sua nota referente ao segundo bimestre:")
    B3 = Receba("Insira sua nota referente ao terceiro bimestre:")
    B4 = Receba("Insira sua nota referente ao quarto bimestre:")
    Media = ((B1 + B2 + B3 + B4) / 4)
    Se (Media >= 6) Então
        Mostra("APROVADO")
        Senão
            Se (Media >= 3) Então
            Mostra("EXAME")
                Senão
                Mostra ("RETIDO")
            Fim_Se
    Fim_Se
Fim_Algoritmo

Algoritmo - Exec22
Declare
    Val1, Val2 como Inteiro
Início
    Val1 = Receba("Insira o primeiro valor:")
    Val2 = Receba("Insira o segundo valor:")
    Enquanto Val2 = Val1
        Mostra("Não é possível inserir valores iguais!")
        Receba("Insira o segundo valor:")
    Fim_Enquanto
    Se (Val2 > Val1) Então
        Mostra("Os apresentando em ordem crescente, fica:") & (Quebra_de_Linha) & Val1 & (Quebra_de_Linha) & Val2
        Senão
            Mostra("Os apresentando em ordem crescente, fica:") & (Quebra_de_Linha) & Val2 & (Quebra_de_Linha) & Val1
    Fim_Se
Fim_Algoritmo


Algoritmo - Exec23
Declare
    Val1, Val2, Val3, Val4 como Decimal
Início
    Val1 = Receba("Insira o primeiro valor:")
    Val2 = Receba(("Insira o segundo valor:") & (Quebra_de_Linha) & ("Maior que o primeiro"))
    	Enquanto (Val2 <= Val1)
    		Mostra("Insira um valor maior que o primeiro")
    		Val2 = Receba(("Insira o segundo valor:") & (Quebra_de_Linha) & ("Maior que o primeiro"))
    	Fim_Enquanto
    Val3 = Receba(("Insira o terceiro valor:") & (Quebra_de_Linha) & ("Maior que o segundo"))
    	Enquanto (Val3 <= Val2)
    		Mostra("Insira um valor maior que o segundo")
    		Val3 = (Receba("Insira o terceiro valor:") & (Quebra_de_Linha) & ("Maior que o segundo"))
    	Fim_Enquanto
    Val4 = Receba("Insira o quarto valor:")
    Se (Val4 > Val3) Então
    	Mostra(("Os valores em ordem crescente ficam:") & (Quebra_de_Linha) & Val1 & (Quebra_de_Linha) & Val2 & (Quebra_de_Linha) & Val3 & (Quebra_de_Linha) & Val4)
    	Senão
    	Se (Val4 > Val2) Então
    		Mostra(("Os valores em ordem crescente ficam:") & (Quebra_de_Linha) & Val1 & (Quebra_de_Linha) & Val2 & (Quebra_de_Linha) & Val4 & (Quebra_de_Linha) & Val3)
    		Senão
    		Se (Val4 > Val1) Então
    			Mostra(("Os valores em ordem crescente ficam:") & (Quebra_de_Linha) & Val1 & (Quebra_de_Linha) & Val4 & (Quebra_de_Linha) & Val2 & (Quebra_de_Linha) & Val3)
    			Senão
    				Mostra(("Os valores em ordem crescente ficam:") & (Quebra_de_Linha) & Val4 & (Quebra_de_Linha) & Val1 & (Quebra_de_Linha) & Val2 & (Quebra_de_Linha) & Val3)
    		Fim_Se
    	Fim_Se
    Fim_Se
Fim_Algoritmo

Algoritmo - Exec24
Declare
    Valor como Decimal
Início
Valor = Receba("Insira o valor:")
	Se (0 = Valor mod 2) e (0 = Valor mod 3) Então
			Mostra("O número é divisível por dois e por três!")
		Senão
		Se (0 = Valor mod 2) Então
			Mostra("O número é divisível por dois!")
			Senão
			Se (0 = Valor mod 3) Então
				Mostra("O número é divisível por três!")
				Senão
		        	Mostra("O valor não é divisível nem por três e nem por dois!")
			Fim_Se
		Fim_Se
	Fim_Se
Fim_Algoritmo

Private Sub Algoritmo - Exec25()
Declare
    hr_ini, min_ini, hr_fin, min_fin, HrDoJogo como Decimal
Início
    hr_ini = Receba("Horário de início! Insira a hora no formato 24h: ")
        Enquanto (hr_ini > 23)
            Mostra ("Por favor, insira apenas valores positivos menores que 24!")
            hr_ini = Receba("Horário de início! Insira a hora no formato 24h: ")
        Fim_Enquanto
    min_ini = Receba("Horário de início! Insira os minutos: ")
        Enquanto (min_ini > 59)
            Mostra ("Por favor, insira apenas valores positivos menores que 60!")
            min_ini = Receba("Horário de início! Insira os minutos: ")
        Fim_Enquanto
    hr_ini = ((hr_ini * 60) + min_ini)
    hr_fin = (Receba("Horário do fim! Insira a hora no formato 24h: "))
        Enquanto hr_fin > 23
            Mostra ("Por favor, insira apenas valores positivos menores que 24!")
            hr_fin = Receba("Horário de fim! Insira a hora no formato 24h: ")
        Fim_Enquanto
    min_fin = Receba("Horário de fim! Insira os minutos: ")
        Enquanto (min_fin > 59)
            Mostra ("Por favor, insira apenas valores positivos menores que 60!")
            min_fin = Receba("Horário de fim! Insira os minutos: ")
        Fim_Enquanto
    hr_fin = ((hr_fin * 60) + min_fin)
        Se (hr_fin < hr_ini) Então
            HrDoJogo = (hr_fin + 1440 - hr_ini)
            Senão
                (HrDoJogo = hr_fin - hr_ini)
        Fim_Se
    Mostra(("O jogo durou: ") & ((HrDoJogo / 60) - (HrDoJogo mod 60)) & "h e " & ((HrDoJogo mod 60) * 60) & "m")
Fim_Algoritmo

Algoritmo - Exec26
Declare
    Num1, Num2, Maior, Menor como Decimal
Início
    Num1 = Receba("Insira o primeiro número:")
    Num2 = Receba("Insira o segundo número:")
        Se (Num1 = Num2) Então
    		Mostra("Os números são iguais!")
    	Fim_Se
    	Se (Num1 > Num2) Então
            Maior = Num1
            Menor = Num2
            Senão
            Maior = Num2
            Menor = Num1
        Fim_Se
        Se (0 = Maior Mod Menor) Então
            Mostra (("O número ") & Maior & " é multiplo de " & Menor)
            Senão
                Mostra (("O número ") & Maior & " não é multiplo de " & Menor)
        Fim_Se
Fim_Algoritmo

Algoritmo - Exec27
Declare
    Voltas, Extensao, Tempo, VelMed como Decimal
Início
    Voltas = Receba("Insira a quantidade de voltas:")
    Extensao = Receba("Insira a extensão do circuito em metros:")
    Tempo = Receba("Insira o tempo de duração em minutos:")
    VelMed = ((Voltas * Extensao) / (Tempo*60))
    Velmed = Arrendonde(VelMed, 2)
    Mostra(("A sua velocidade média foi de: ") & VelMed & ("m/s"))
Fim_Algoritmo

Algoritmo - Exec28
Declare
    PrecoAt, NovoPreco como Decimal
Declare
    MedMensal como Inteiro
Início
    MedMensal = Receba("Insira a média de vendas mensais:")
    PrecoAt = Receba("Insira o preço atual:")
    Se (MedMensal<500 and PrecoAt<30) Então
    	NovoPreco = (PrecoAt * 1.1)
    	Senão
    	Se (MedMensal < 1000 and PrecoAt >=30 and PrecoAt < 80) Então
    		NovoPreco = (PrecoAt * 1.15)
    		Senão
    		Se (MedMensal >= 1000 and PrecoAt >= 80) Então
    			NovoPreco = (PrecoAt * 0.95)
    			Senão NovoPreco = PrecoAt
    		Fim_Se
    	Fim_Se
    Fim_Se
    Mostra(("O novo preço do produto será: ") & NovoPreco)
Fim_Algoritmo

Algoritmo - Exec29
Declare
    Investimento, ValInvest, Rendimento como Decimal
Início
    Investimento = Receba(("Insira o tipo do investimento:") & (Quebra_de_Linha) & ("1 = Poupança") & (Quebra_de_Linha) & ("2 = Renda Fixa"))
    Enquanto (Investimento > 2)
        Mostra ("Só é possível inserir 1 ou 2 (respectivamente Poupança e Renda Fixa)")
        Investimento = Receba(("Insira o tipo do investimento: ") & (Quebra_de_Linha) & ("1 = Poupança") & (Quebra_de_Linha) & ("2 = Renda Fixa"))
    Fim_Enquanto
    ValInvest = Receba("Insira qual o valor que pretende investir:")
    Enquanto ValInvest < 0
        Mostra ("Insira apenas valores positivos!")
        ValInvest = Receba("Insira qual o valor que pretende investir:")
    Fim_Enquanto
    Se Investimento = 1 Então
    Rendimento = (ValInvest * 1.03)
        Senão
        Se Investimento = 2 Então
        Rendimento = (ValInvest * 1.05)
    Fim_Se
    Fim_Se
    Mostra (("O valor bruto na sua conta serà de: ") & Rendimento)
Fim_Algoritmo

Algoritmo - Exec31
Declare
    Nums, QuadradoNums, Incremento como Inteiro
Início
    Nums = 10
    Enquanto (Nums < 151)
        QuadradoNums = (Nums * Nums)
        Incremento = (Nums + 1)
        Nums = Incremento
        Mostra (("O quadrado de ") & (Incremento - 1) & (" é: ") & QuadradoNums)
    Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec32
Declare
    Num, Fatorial como Inteiro
Início
    Num = Receba("Insira o número: ")
    Fatorial = Num
    Enquanto (Fatorial > 1)
        Fatorial = (Fatorial - 1)
        Num = (Fatorial * Num)
    Fim_Enquanto
    Mostra (("O fatorial do número é: ") & Num)
Fim_Algoritmo

Algoritmo - Exec34
Declare
    Valor, Multiplicador, Resultado como Inteiro
Início
    Valor = Receba("Insira o número desejado: ")
    Multiplicador = -1
    Enquanto Multiplicador < 10
        Multiplicador = (Multiplicador + 1)
        Resultado = (Valor * Multiplicador)
        Mostra ((Valor) & ("x") & (Multiplicador) & (" = ") & Resultado)
        Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec35
Declare
    Num1, Num2, Maior, Menor, Somatoria como Inteiro
Início
    Num1 = Receba("Insira o primeiro número:")
    Num2 = Receba("Insira o segundo número:")
    Somatoria = 0
    Se (Num1 < Num2) Então
        Maior = Num2
    	Menor = Num1
        Senão 
    		Maior = Num1
    		Menor = Num2
    Fim_Se
    Se (Menor Mod 2 <> 0) Então
        Menor = Menor
        Senão
        Se Menor Mod 2 = 0 Então
            Menor = Menor + 1
        Fim_Se
    Fim_Se
    Enquanto (Menor <= Maior)
    	Somatoria = (Somatoria + Menor)
    	Menor = (Menor + 2)
    Fim_Enquanto
    Mostra (("A somatória dos números ímpares entre o maior e o menor é: ") & Somatoria)
Fim_Algoritmo

Algoritmo - Exec36
Declare
    N, Den, Frac, Fat, FatR, GuarDen, GuarSeq, SomSeq como Decimal
Início
    N = Receba("Insira o enésimo número:")
    Den = 1
    Fat = 1
    FatR = 1
    Enquanto (Den <= N)
        FatR = Fat
        Enquanto (Fat > 1)
            Fat = (Fat - 1)
            FatR = (Fat * FatR)
        Fim_Enquanto
        GuarSeq = (1 / FatR)
        SomSeq = (SomSeq + GuarSeq)
        Den = (Den + 1)
        Fat = Den
    Fim_Enquanto
    Mostra (("O resultado é: ") & SomSeq)
Fim_Algoritmo

Algoritmo - Exec37
Declare
    N, NMU, NMD, ValSoma, LimN como Decimal
Início
    LimN = Receba("Insira o enésimo número da sequência:")
    N = 1
    NMU = 0
    NMD = 1
    Enquanto (N <= LimN)
        ValSoma = (NMU + NMD)
        Mostra (("Para N = ") & N & (" temos: ") & NMD & (" + ") & NMU & (" = ") & ValSoma)
        N = N + 1
        NMD = NMU
        NMU = ValSoma
    Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec38
Declare
    Maior, Menor, UserInput como Decimal
Declare
    Contador como Inteiro
Início
    Contador = 1
    Enquanto (Contador <= 100)
        UserInput = Receba(("Insira o ") & Contador & ("° número:"))
        Enquanto (UserInput < 0)
            Mostra("Insira apenas números positivos!")
            UserInput = Receba(("Insira o ") & Contador & ("° número:"))
        Fim_Enquanto
        Contador = (Contador + 1)
        Se (Menor = 0) Então
            Menor = UserInput
            Maior = UserInput
                Senão
                Se (UserInput < Menor) Então
                    Menor = UserInput
                    Senão
                    Se (UserInput > Maior) Então
                        Maior  = UserInput
                    Fim_Se
                Fim_Se
        Fim_Se
    Fim_Enquanto
    Mostra(("Maior: ") & Maior & (Quebra_de_Linha) & ("Menor: ") & Menor)
Fim_Algoritmo

Algoritmo - Exec39
Declare
    Casa, Qnt, QntMU como Inteiro 
Declare
    GuarMult como Decimal
Início
    Casa = 1
    Qnt = 1
    QntMU = 1
    Enquanto (Casa <= 64)
        Se Casa = 1 Então
            Mostra (("Para a casa ") & Casa & (" temos 1 grão"))
            Casa = (Casa + 1)
        Fim_Se
        GuarMult = (Qnt * 2)
        Qnt = GuarMult
        Mostra (("Para a casa ") & Casa & (" temos ") & GuarMult & (" grãos"))
        Casa = (Casa + 1)
    Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec40
Declare
    Num1, Num2, Menor, Maior, Divisores como Inteiro
Declare
    Cont como Decimal
Início
    Num1 = Receba("Insira o primeiro número:")
    Num2 = Receba("Insira o segundo número:")
    Divisores = 0
    Cont = 1
    Se (Num1 < Num2) Então
        Menor = Num1
        Maior = Num2
        Senão
            Menor = Num2
            Maior = Num1
    Fim_Se
    Enquanto (Menor <= Maior)
        Enquanto (Cont <= Menor)
            Se (0 = Menor Mod Cont) Então
                Divisores = (Divisores + 1)
            Fim_Se
            Cont = (Cont + 1)
        Fim_Enquanto
        Se (Divisores = 2) Então
            Mostra(("O número ") & Menor & (" é primo!"))
        Fim_Se
        Menor = (Menor + 1)
        Cont = 1
        Divisores = 0
    Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec41
Declare
    D1, D2, Soma como Inteiro
Início
    D1 = 1
    D2 = 1
    Enquanto (D2 <= 6)
        Enquanto (D1 <= 6)
                Soma = (D1 + D2)
            Se (Soma = 7) Então
                Mostra (("A soma de ") & D2 & ("+") & D1 & (" = ") & Soma)
            Fim_Se
            D1 = (D1 + 1)
        Fim_Enquanto
        D2 = (D2 + 1)
        D1 = 1
    Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec42
Declare
    N1, N2, Soma, Div como Decimal
Início
    N1 = 1
    N2 = 1
    Enquanto (N1 <= 50)
        Div = (N1 / N2)
        Soma = (Soma + Div)
        Mostra (("O ") & N1 & ("° termo, sendo: ") & N1 & ("/") & N2 & (" = ") & Soma)
        N1 = (N1 + 1)
        N2 = (N2 + 2)
    Fim_Enquanto
Fim_Algoritmo

Algoritmo - Exec43
Declare
    AltAna, AltMaria, Anos como Decimal
Início
    AltAna = 1.1
    AltMaria = 1.5
    Enquanto (AltAna > AltMaria)
        AltAna = (AltAna + 0.03)
        AltMaria = (AltMaria + 0.02)
        Anos = (Anos + 1)
    Fim_Enquanto
    Mostra (("A Ana terá a altura de Maria ao passar ") & Anos & (" anos!"))
Fim_Algoritmo

Algoritmo - Exec44
Declare
    Base, Expoente, GuarExpoente, Multiplicador como Decimal
Início
    Base = Receba("Insira o valor da base:")
    Expoente = Receba("Insira o valor do expoente:")
    Multiplicador = Base
    GuarExpoente = Expoente
    Enquanto (Expoente > 1)
        Expoente = (Expoente - 1)
        Base = (Base * Multiplicador)
    Fim_Enquanto
    Mostra (Multiplicador & ("^") & GuarExpoente & (" = ") & Base)
Fim_Algoritmo

Algoritmo - Exec45
Declare
    Numerador, Denominador como Inteiro
Declare
    Fracao, OperFrac, SomaFrac como Decimal
Início
    Numerador = 1
    Enquanto Numerador <= 15
        Denominador = (Numerador * Numerador)
        Fracao = (Numerador / Denominador)
        Se (0 = Numerador Mod 2) Então
            OperFrac = (OperFrac - Fracao)
            Senão
            Se (0 <> Numerador Mod 2) Então
                OperFrac = (OperFrac + Fracao)
            Fim_Se
        Fim_Se
        Se (Numerador = 2) Então
            Mostra (("A soma de: ") & (Numerador - 1) & ("/") & ((Numerador - 1) ^ 2) & (" - ") & Numerador & ("/") & Denominador & " = " & OperFrac)
            Senão
            Se (3 < Numerador < 13) Então
                Se (0 = Numerador Mod 2) Então
                    Mostra (("A soma de: ... ") & (Numerador - 1) & ("/") & ((Numerador - 1) ^ 2) & (" - ") & Numerador & ("/") & Denominador & " = " & OperFrac & (" ..."))
                    Senão
                    Se (0 <> Numerador Mod 2) Então
                        Mostra (("A soma de: ... ") & (Numerador - 1) & ("/") & ((Numerador - 1) ^ 2) & (" + ") & Numerador & ("/") & Denominador & " = " & OperFrac & (" ..."))
                    Fim_Se
                Fim_Se
            Fim_Se
            Se (Numerador = 15) Então
                Mostra (("A soma de: ... ") & (Numerador - 1) & ("/") & ((Numerador - 1) ^ 2) & (" + ") & Numerador & ("/") & Denominador & " = " & OperFrac)
            Fim_Se
        Fim_Se
        Numerador = (Numerador + 1)
        SomaFrac = (SomaFrac + OperFrac)
    Fim_Enquanto
Fim_Algoritmo


Code by Fernando Oliveira da Costa
